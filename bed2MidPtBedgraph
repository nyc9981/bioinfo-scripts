#!/usr/bin/perl -w
#use strict;

#
#by Xin Wang 


use strict;
use File::Basename;

my $prog = basename ($0);
my ($infile, $outfile);

if (@ARGV == 1) {
   ($infile)=@ARGV;
   $outfile = "$infile\.midpt.bedgraph";  # default output file name
   # Derive midpt bedgraph file name if infile matches the following pattern
   if ( $infile =~ /(.+sorted\.unique\.)bed/ ) {
      $outfile = "$1midpt.bedgraph";
   }
}
elsif (@ARGV == 2) {
   ($infile, $outfile) = @ARGV;
}
else {
    print "Extract data from Bed files into BedGraph files with first 3 cols\n";
    print "$prog <in_file> <out_file>\n";
    print " <in_file> : input Bed file\n";
    print " <out_file> OPTIONAL: output file containing extracted data\n";
    print "     if not provided: output file is named as input file name followed by .midpt.bedgraph\n";
    exit (1);
}

open (FH_IN, "<$infile") || die "cannot open \"$infile\": $!";
open (FH_OUT, ">$outfile") || die "cannot open \"$outfile\": $!";

my $line;
my @v;
my ($chrNo, $midPt, $next, $size) = ("", 0, 0, 0);

while ($line = <FH_IN>) {     
    chomp ($line);
    next if $line =~ /^@/;

    @v = split('\t', $line);

	$chrNo = $v[0];
	$size = $v[2] - $v[1];
	
	# OLD: if size is even number, mid pt lies at two positions
	# so, the two mid points with same size is written to the output file
	# if size is odd number, mid pt lies at one center positions
	# the same one mid point with the size is written TWICE to the output file
	
	##NEW: changed 10/19/2015:  Only 1 mid point position is written
	# if size is even number, mid pt lies at two positions
	# but the second mid point is chosen
	# if size is odd number, mid pt lies at one center position 
	
	$midPt = $v[1] + int ($size / 2);
	$next = $midPt + 1;
	#print FH_OUT "$chrNo\t$midPt\t$next\t$size\n";
	print FH_OUT "$chrNo\t$midPt\t$next\t$size\n";
		
# 	if ( $size % 2 == 0) {
# 		$midPt = $v[1] + $size / 2 -1;
# 		print FH_OUT "$chrNo\t$midPt\t$midPt\t$size\n";
# 		#print FH_OUT "$chrNo\t", $midPt+1, "\t", $midPt+1, "\t$size\n";
# 	} else {
# 		$midPt = $v[1] + int ($size / 2);
# 		#print FH_OUT "$chrNo\t$midPt\t$midPt\t$size\n";
# 		print FH_OUT "$chrNo\t$midPt\t$midPt\t$size\n";
# 		}
		
}

close (FH_IN);
close (FH_OUT);




