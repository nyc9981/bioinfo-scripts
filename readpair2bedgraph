#!/bin/bash
set -eux -o pipefail

################################
# readpair2bedgraph
# by Xin Wang 
#
# Require ONE and only one pair 
# of paired-end reads in a folder
################################

# default Reference_Genome_Sequence_File, will check for existence if being used
Reference_Genome_Sequence_File="/Users/Xin/genome/sacCer3/sacCer3.fa"
Reference_Genome_Chrom_Sizes_File="/Users/Xin/genome/sacCer3/sacCer3.chrom.sizes"

usage="Usage: $0 [Reference_Genome_Sequence_File] [Reference_Genome_Chrom_Sizes_File]"

if [ $# -gt 2 ]; then
	echo $usage
	exit 1
fi

if [ $# -eq 1 ]; then
	echo $usage
	exit 1
fi

if [ $# -eq 2 ]; then
    Reference_Genome_Sequence_File=$1
    Reference_Genome_Chrom_Sizes_File=$2
fi

if ! [ -e $Reference_Genome_Sequence_File ]; then
    echo "The Reference Genome Sequence File $Reference_Genome_Sequence_File does not exist!"
    echo $usage
    exit 1
fi

if ! [ -e $Reference_Genome_Chrom_Sizes_File ]; then
    echo "The Reference Genome Chrom Sizes File $Reference_Genome_Chrom_Sizes_File does not exist!"
    echo $usage
    exit 1
fi

# Find fastq.gz files, assign them to read1 and read2
fastqGzFiles=( *.fastq.gz )

# Make sure only two such files exist
if ! [ ${#fastqGzFiles[@]} -eq 2 ]; then
    echo "Require TWO (paired-end) fastq.gz files!"
    exit 1
fi

read1=${fastqGzFiles[0]}
read2=${fastqGzFiles[1]}

samGzFile="${read1%_R1_001.fastq.gz}.sam.gz"
samFile="${read1%_R1_001.fastq.gz}.sam"
hasSamGzFile=false

# check if compressed alignment file exists
# if yes, unzip it then skip to creating the paired-end bed file
if ! [ -e $samGzFile ]; then
    echo $'\n\nCutting adaptors, cleaning the reads...............................\n'

    # Cut adaptor, eliminate reads with length <= 17 (see cutcleanPE), then sync paired-end reads
    # Create 2 fastq files
    # cutcleanPE $read1 $read2 
    minLen=17
    cutclean1="${read1%.fastq.gz}.cutclean.fastq.gz"
    cutclean2="${read2%.fastq.gz}.cutclean.fastq.gz"
    
    # Should use: -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT
    cutadapt -a AGATCGGAAGAGC -A AGATCGGAAGAGC --minimum-length $minLen -o $cutclean1 -p $cutclean2 $read1 $read2

    echo $'\nAligning...........................................................\n'
    
    sai1="${cutclean1%.fastq.gz}.sai"
    sai2="${cutclean2%.fastq.gz}.sai"
    
    # Index only needs to be built once
    # bwa index $genome (for short genomes)
    # bwa index -a bwtsw $genome (for long genomes)
    bwa aln $Reference_Genome_Sequence_File $cutclean1 >$sai1
    bwa aln $Reference_Genome_Sequence_File $cutclean2 >$sai2
    bwa sampe $Reference_Genome_Sequence_File $sai1 $sai2 $cutclean1 $cutclean2 >$samFile
else
    hasSamGzFile=true
    echo $'\nDecompressing pre-existing sam.gz file..............................\n'
    # keep the original file while decompressing it
    gzip -k -d $samGzFile
fi

bedFile="${samFile%.sam}.bed"
uniqueBed="${samFile%.sam}.unique.bed" 
bedGraph="${samFile%.sam}.bedgraph"

echo $'\nCreating the paired-end bed file...................................\n'
# convert SAM to short BED 
sam2ShortBed $samFile $bedFile

# sort BED by chr no and positions
# delete duplicate alignments 
Max_Frag_Size=600
sort -k1,1 -k2,2n -k3,3n $bedFile | \
uniq > $uniqueBed
#awk -F"\t" -v var="$Max_Frag_Size" '($3-$2) <= var' > $uniqueBed

# blacklisted genome regions
# bedtools intersect -a $uniqueBed -b $Blacklist_Bed -sorted -v

echo $'\nCreating the bedgraph file.........................................\n'
# Use bedtools to calculate genome coverage of each position in file format of bedGraph
bedtools genomecov -bg -i $uniqueBed -g $Reference_Genome_Chrom_Sizes_File >$bedGraph

normBedgraph="${samFile%.sam}.norm.bedgraph"

# calculate the total coverage using the raw bedgraph file
totalCoverage=$(awk -F'\t' '{sum+=($3-$2)*$4} END {print sum}' $bedGraph)

# calculate the size of genome using its sequence file
genomeSize=$(awk -F'\t' '{sum+=$2}END{print sum}'  $Reference_Genome_Chrom_Sizes_File)

# normalize to coverage depth
awk -v tc="$totalCoverage" -v gs="$genomeSize" '{$4/=(tc/gs)}1' $bedGraph > $normBedgraph

echo $'\nFinalizing.........................................................\n'
rm -f $bedFile
gzip -f $uniqueBed

if [[ "$hasSamGzFile" == true ]] ; then
    rm -f $samFile
else
    rm -f $cutclean1 $cutclean2 $sai1 $sai2
    gzip -f $samFile
fi

echo $'\nDone!..............................................................\n\n'