#!/bin/bash
set -eu -o pipefail

################################
# readpair2bam
#
# Require ONE and only one pair 
# of paired-end reads in a folder
################################

# default Reference_Genome_Sequence_File, will check for existence if being used
Reference_Genome_Sequence_File=~/genome/hg19/hg19.fa


usage="Usage: $0 [Reference_Genome_Sequence_File]"

if [ $# -gt 1 ]; then
	echo $usage
	exit 1
fi

if [ $# -eq 1 ]; then
    Reference_Genome_Sequence_File=$1
fi

if ! [ -e $Reference_Genome_Sequence_File ]; then
    echo "The Reference Genome Sequence File $Reference_Genome_Sequence_File does not exist!"
    echo $usage
    exit 1
fi

# Find fastq.gz files, assign them to read1 and read2
fastqGzFiles=( *.fastq.gz )

# Make sure only two such files exist
if ! [ ${#fastqGzFiles[@]} -eq 2 ]; then
    echo "Require TWO (paired-end) fastq.gz files!"
    exit 1
fi

read1=${fastqGzFiles[0]}
read2=${fastqGzFiles[1]}

samGzFile="${read1%_R1_001.fastq.gz}.sam.gz"
samFile="${read1%_R1_001.fastq.gz}.sam"
hasSamGzFile=false

# check if compressed alignment file exists
# if yes, unzip it then skip to creating the paired-end bed file
if ! [ -e $samGzFile ]; then
    echo $'\n\nCutting adaptors, cleaning the reads...............................\n'

    # Cut adaptor, eliminate reads with length <= 17 (see cutcleanPE), then sync paired-end reads
    # Create 2 fastq files
    # cutcleanPE $read1 $read2 
    minLen=17
    cutclean1="${read1%.fastq.gz}.cutclean.fastq.gz"
    cutclean2="${read2%.fastq.gz}.cutclean.fastq.gz"
    
    # Should use: -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT
    cutadapt -a AGATCGGAAGAGC -A AGATCGGAAGAGC --minimum-length $minLen -o $cutclean1 -p $cutclean2 $read1 $read2

    echo $'\nAligning...........................................................\n'
    
    sai1="${cutclean1%.fastq.gz}.sai"
    sai2="${cutclean2%.fastq.gz}.sai"
    
    # Index only needs to be built once
    # bwa index $genome (for short genomes)
    # bwa index -a bwtsw $genome (for long genomes)
    bwa aln $Reference_Genome_Sequence_File $cutclean1 >$sai1
    bwa aln $Reference_Genome_Sequence_File $cutclean2 >$sai2
    bwa sampe $Reference_Genome_Sequence_File $sai1 $sai2 $cutclean1 $cutclean2 >$samFile
else
    hasSamGzFile=true
    echo $'\nDecompressing pre-existing sam.gz file..............................\n'
    gzip -k -d $samGzFile
fi

echo $'\nCreating the sorted bam file.........................................................\n'

# Find the sam file, convert it to a bam file, 
# then sort the bed file by chr no and start pos, delete duplicate alignments, 
# finally use bedtools to calculate genome coverage of each position in file format of bedGraph
bamFile="${samFile%.sam}.sorted.bam"  
dupMarkedBamFile="${samFile%.sam}.dupmarked.bam"
metricsFile="${samFile%.sam}.dup.metrics"
samtools view -bS $samFile | samtools sort - -o $bamFile
#gzip $samFile

echo $'\nMarking duplicates.........................................................\n'
java -Dsamjdk.compression_level=5 -Xms4000m -jar $PICARD \
      MarkDuplicates \
      INPUT=$bamFile\
      OUTPUT=$dupMarkedBamFile \
      METRICS_FILE=$metricsFile \
      REMOVE_DUPLICATES=false \
      VALIDATION_STRINGENCY=SILENT \
      ASSUME_SORTED=true 
# index the bam file if needed
samtools index $dupMarkedBamFile

echo $'\nFinalizing.........................................................\n'

if [[ "$hasSamGzFile" == true ]] ; then
    rm -f $samFile
else
    rm -f $cutclean1 $cutclean2 $sai1 $sai2
    gzip -f $samFile
fi

echo $'\n...................................Done!...........................................\n\n'